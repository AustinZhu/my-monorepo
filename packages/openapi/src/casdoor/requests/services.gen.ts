// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { RootControllerGetJwksResponse, RootControllerGetOidcDiscoveryResponse, ApiControllerCallbackResponse, ApiControllerAddAdapterData, ApiControllerAddAdapterResponse, ApiControllerDeleteAdapterData, ApiControllerDeleteAdapterResponse, ApiControllerGetAdapterData, ApiControllerGetAdapterResponse, ApiControllerGetAdaptersData, ApiControllerGetAdaptersResponse, ApiControllerUpdateAdapterData, ApiControllerUpdateAdapterResponse, ApiControllerAddApplicationData, ApiControllerAddApplicationResponse, ApiControllerDeleteApplicationData, ApiControllerDeleteApplicationResponse, ApiControllerGetApplicationData, ApiControllerGetApplicationResponse, ApiControllerGetApplicationsData, ApiControllerGetApplicationsResponse, ApiControllerGetOrganizationApplicationsData, ApiControllerGetOrganizationApplicationsResponse, ApiControllerGetUserApplicationData, ApiControllerGetUserApplicationResponse, ApiControllerUpdateApplicationData, ApiControllerUpdateApplicationResponse, ApiControllerAddCertData, ApiControllerAddCertResponse, ApiControllerDeleteCertData, ApiControllerDeleteCertResponse, ApiControllerGetCertData, ApiControllerGetCertResponse, ApiControllerGetCertsData, ApiControllerGetCertsResponse, ApiControllerGetGlobalCertsResponse, ApiControllerUpdateCertData, ApiControllerUpdateCertResponse, ApiControllerAddEnforcerData, ApiControllerAddEnforcerResponse, ApiControllerBatchEnforceData, ApiControllerBatchEnforceResponse, ApiControllerDeleteEnforcerData, ApiControllerDeleteEnforcerResponse, ApiControllerEnforceData, ApiControllerEnforceResponse, ApiControllerGetEnforcerData, ApiControllerGetEnforcerResponse, ApiControllerGetEnforcersData, ApiControllerGetEnforcersResponse, ApiControllerUpdateEnforcerData, ApiControllerUpdateEnforcerResponse, ApiControllerAddGroupData, ApiControllerAddGroupResponse, ApiControllerDeleteGroupData, ApiControllerDeleteGroupResponse, ApiControllerGetGroupData, ApiControllerGetGroupResponse, ApiControllerGetGroupsData, ApiControllerGetGroupsResponse, ApiControllerUpdateGroupData, ApiControllerUpdateGroupResponse, ApiControllerAddInvitationData, ApiControllerAddInvitationResponse, ApiControllerDeleteInvitationData, ApiControllerDeleteInvitationResponse, ApiControllerGetInvitationData, ApiControllerGetInvitationResponse, ApiControllerGetInvitationsData, ApiControllerGetInvitationsResponse, ApiControllerUpdateInvitationData, ApiControllerUpdateInvitationResponse, ApiControllerVerifyInvitationData, ApiControllerVerifyInvitationResponse, ApiControllerAddLdapData, ApiControllerAddLdapResponse, ApiControllerDeleteLdapData, ApiControllerDeleteLdapResponse, ApiControllerGetAccountResponse, ApiControllerGetLdapData, ApiControllerGetLdapResponse, ApiControllerGetLdapserResponse, ApiControllerGetLdapsData, ApiControllerGetLdapsResponse, ApiControllerResetEmailOrPhoneResponse, ApiControllerSetPasswordData, ApiControllerSetPasswordResponse, ApiControllerSyncLdapUsersData, ApiControllerSyncLdapUsersResponse, ApiControllerUpdateLdapData, ApiControllerUpdateLdapResponse, ApiControllerUserInfo2Response, ApiControllerUserInfoResponse, ApiControllerAddModelData, ApiControllerAddModelResponse, ApiControllerDeleteModelData, ApiControllerDeleteModelResponse, ApiControllerGetModelData, ApiControllerGetModelResponse, ApiControllerGetModelsData, ApiControllerGetModelsResponse, ApiControllerUpdateModelData, ApiControllerUpdateModelResponse, ApiControllerAddOrganizationData, ApiControllerAddOrganizationResponse, ApiControllerDeleteOrganizationData, ApiControllerDeleteOrganizationResponse, ApiControllerGetDefaultApplicationData, ApiControllerGetDefaultApplicationResponse, ApiControllerGetOrganizationData, ApiControllerGetOrganizationResponse, ApiControllerGetOrganizationNamesData, ApiControllerGetOrganizationNamesResponse, ApiControllerGetOrganizationsData, ApiControllerGetOrganizationsResponse, ApiControllerUpdateOrganizationData, ApiControllerUpdateOrganizationResponse, ApiControllerAddPaymentData, ApiControllerAddPaymentResponse, ApiControllerDeletePaymentData, ApiControllerDeletePaymentResponse, ApiControllerGetPaymentData, ApiControllerGetPaymentResponse, ApiControllerGetPaymentsData, ApiControllerGetPaymentsResponse, ApiControllerGetUserPaymentsData, ApiControllerGetUserPaymentsResponse, ApiControllerInvoicePaymentData, ApiControllerInvoicePaymentResponse, ApiControllerNotifyPaymentData, ApiControllerNotifyPaymentResponse, ApiControllerUpdatePaymentData, ApiControllerUpdatePaymentResponse, ApiControllerAddPermissionData, ApiControllerAddPermissionResponse, ApiControllerDeletePermissionData, ApiControllerDeletePermissionResponse, ApiControllerGetPermissionData, ApiControllerGetPermissionResponse, ApiControllerGetPermissionsData, ApiControllerGetPermissionsResponse, ApiControllerGetPermissionsByRoleData, ApiControllerGetPermissionsByRoleResponse, ApiControllerGetPermissionsBySubmitterResponse, ApiControllerUpdatePermissionData, ApiControllerUpdatePermissionResponse, ApiControllerAddPlanData, ApiControllerAddPlanResponse, ApiControllerDeletePlanData, ApiControllerDeletePlanResponse, ApiControllerGetPlanData, ApiControllerGetPlanResponse, ApiControllerGetPlansData, ApiControllerGetPlansResponse, ApiControllerUpdatePlanData, ApiControllerUpdatePlanResponse, ApiControllerAddPricingData, ApiControllerAddPricingResponse, ApiControllerDeletePricingData, ApiControllerDeletePricingResponse, ApiControllerGetPricingData, ApiControllerGetPricingResponse, ApiControllerGetPricingsData, ApiControllerGetPricingsResponse, ApiControllerUpdatePricingData, ApiControllerUpdatePricingResponse, ApiControllerAddProductData, ApiControllerAddProductResponse, ApiControllerBuyProductData, ApiControllerBuyProductResponse, ApiControllerDeleteProductData, ApiControllerDeleteProductResponse, ApiControllerGetProductData, ApiControllerGetProductResponse, ApiControllerGetProductsData, ApiControllerGetProductsResponse, ApiControllerUpdateProductData, ApiControllerUpdateProductResponse, ApiControllerAddProviderData, ApiControllerAddProviderResponse, ApiControllerDeleteProviderData, ApiControllerDeleteProviderResponse, ApiControllerGetGlobalProvidersResponse, ApiControllerGetProviderData, ApiControllerGetProviderResponse, ApiControllerGetProvidersData, ApiControllerGetProvidersResponse, ApiControllerUpdateProviderData, ApiControllerUpdateProviderResponse, ApiControllerAddResourceData, ApiControllerAddResourceResponse, ApiControllerDeleteResourceData, ApiControllerDeleteResourceResponse, ApiControllerGetResourceData, ApiControllerGetResourceResponse, ApiControllerGetResourcesData, ApiControllerGetResourcesResponse, ApiControllerUpdateResourceData, ApiControllerUpdateResourceResponse, ApiControllerUploadResourceData, ApiControllerUploadResourceResponse, ApiControllerAddRoleData, ApiControllerAddRoleResponse, ApiControllerDeleteRoleData, ApiControllerDeleteRoleResponse, ApiControllerGetRoleData, ApiControllerGetRoleResponse, ApiControllerGetRolesData, ApiControllerGetRolesResponse, ApiControllerUpdateRoleData, ApiControllerUpdateRoleResponse, ApiControllerAddSessionData, ApiControllerAddSessionResponse, ApiControllerDeleteSessionData, ApiControllerDeleteSessionResponse, ApiControllerGetSingleSessionData, ApiControllerGetSingleSessionResponse, ApiControllerGetSessionsData, ApiControllerGetSessionsResponse, ApiControllerIsSessionDuplicatedData, ApiControllerIsSessionDuplicatedResponse, ApiControllerUpdateSessionData, ApiControllerUpdateSessionResponse, ApiControllerAddSubscriptionData, ApiControllerAddSubscriptionResponse, ApiControllerDeleteSubscriptionData, ApiControllerDeleteSubscriptionResponse, ApiControllerGetSubscriptionData, ApiControllerGetSubscriptionResponse, ApiControllerGetSubscriptionsData, ApiControllerGetSubscriptionsResponse, ApiControllerUpdateSubscriptionData, ApiControllerUpdateSubscriptionResponse, ApiControllerAddSyncerData, ApiControllerAddSyncerResponse, ApiControllerDeleteSyncerData, ApiControllerDeleteSyncerResponse, ApiControllerGetSyncerData, ApiControllerGetSyncerResponse, ApiControllerGetSyncersData, ApiControllerGetSyncersResponse, ApiControllerRunSyncerData, ApiControllerRunSyncerResponse, ApiControllerUpdateSyncerData, ApiControllerUpdateSyncerResponse, ApiControllerAddTokenData, ApiControllerAddTokenResponse, ApiControllerDeleteTokenData, ApiControllerDeleteTokenResponse, ApiControllerGetCaptchaStatusData, ApiControllerGetCaptchaStatusResponse, ApiControllerGetTokenData, ApiControllerGetTokenResponse, ApiControllerGetTokensData, ApiControllerGetTokensResponse, ApiControllerGetOauthTokenData, ApiControllerGetOauthTokenResponse, ApiControllerRefreshTokenData, ApiControllerRefreshTokenResponse, ApiControllerUpdateTokenData, ApiControllerUpdateTokenResponse, ApiControllerAddUserData, ApiControllerAddUserResponse, ApiControllerAddUserKeysResponse, ApiControllerCheckUserPasswordResponse, ApiControllerDeleteUserData, ApiControllerDeleteUserResponse, ApiControllerGetEmailAndPhoneData, ApiControllerGetEmailAndPhoneResponse, ApiControllerGetGlobalUsersResponse, ApiControllerGetSortedUsersData, ApiControllerGetSortedUsersResponse, ApiControllerGetUserData, ApiControllerGetUserResponse, ApiControllerGetUserCountData, ApiControllerGetUserCountResponse, ApiControllerGetUsersData, ApiControllerGetUsersResponse, ApiControllerUpdateUserData, ApiControllerUpdateUserResponse, ApiControllerWebAuthnSignupBeginResponse, ApiControllerWebAuthnSignupFinishData, ApiControllerWebAuthnSignupFinishResponse, ApiControllerAddWebhookData, ApiControllerAddWebhookResponse, ApiControllerDeleteWebhookData, ApiControllerDeleteWebhookResponse, ApiControllerGetWebhookData, ApiControllerGetWebhookResponse, ApiControllerGetWebhooksData, ApiControllerGetWebhooksResponse, ApiControllerUpdateWebhookData, ApiControllerUpdateWebhookResponse, ApiControllerDeleteMfaResponse, ApiControllerMfaSetupEnableResponse, ApiControllerMfaSetupInitiateResponse, ApiControllerMfaSetupVerifyResponse, ApiControllerSetPreferredMfaResponse, ApiControllerGetApplicationLoginData, ApiControllerGetApplicationLoginResponse, ApiControllerGetCaptchaResponse, ApiControllerLoginData, ApiControllerLoginResponse, ApiControllerIntrospectTokenData, ApiControllerIntrospectTokenResponse, ApiControllerLogoutData, ApiControllerLogoutResponse, ApiControllerSignupData, ApiControllerSignupResponse, ApiControllerUnlinkResponse, ApiControllerWebAuthnSigninBeginData, ApiControllerWebAuthnSigninBeginResponse, ApiControllerWebAuthnSigninFinishData, ApiControllerWebAuthnSigninFinishResponse, ApiControllerGetDashboardResponse, ApiControllerGetPrometheusInfoResponse, ApiControllerGetSystemInfoResponse, ApiControllerGetVersionInfoResponse, ApiControllerGetWebhookEventTypeResponse, ApiControllerHealthResponse, ApiControllerHandleOfficialAccountEventResponse, ApiControllerSendEmailData, ApiControllerSendEmailResponse, ApiControllerSendNotificationData, ApiControllerSendNotificationResponse, ApiControllerSendSmsData, ApiControllerSendSmsResponse, ApiControllerSendVerificationCodeResponse, ApiControllerVerifyCaptchaResponse, ApiControllerVerifyCodeResponse } from './types.gen';

export class OidcApiService {
    /**
     * @returns jose_JSONWebKey
     * @throws ApiError
     */
    public static rootControllerGetJwks(): CancelablePromise<RootControllerGetJwksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/.well-known/jwks'
        });
    }
    
    /**
     * Get Oidc Discovery
     * @returns object_OidcDiscovery
     * @throws ApiError
     */
    public static rootControllerGetOidcDiscovery(): CancelablePromise<RootControllerGetOidcDiscoveryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/.well-known/openid-configuration'
        });
    }
    
}

export class CallbackApiService {
    /**
     * Get Login Error Counts
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerCallback(): CancelablePromise<ApiControllerCallbackResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/Callback'
        });
    }
    
}

export class AdapterApiService {
    /**
     * add adapter
     * @param data The data for the request.
     * @param data.body The details of the adapter
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddAdapter(data: ApiControllerAddAdapterData): CancelablePromise<ApiControllerAddAdapterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-adapter',
            body: data.body
        });
    }
    
    /**
     * delete adapter
     * @param data The data for the request.
     * @param data.body The details of the adapter
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteAdapter(data: ApiControllerDeleteAdapterData): CancelablePromise<ApiControllerDeleteAdapterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-adapter',
            body: data.body
        });
    }
    
    /**
     * get adapter
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the adapter
     * @returns object_Adapter The Response object
     * @throws ApiError
     */
    public static apiControllerGetAdapter(data: ApiControllerGetAdapterData): CancelablePromise<ApiControllerGetAdapterResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-adapter',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get adapters
     * @param data The data for the request.
     * @param data.owner The owner of adapters
     * @returns object_Adapter The Response object
     * @throws ApiError
     */
    public static apiControllerGetAdapters(data: ApiControllerGetAdaptersData): CancelablePromise<ApiControllerGetAdaptersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-adapters',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update adapter
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the adapter
     * @param data.body The details of the adapter
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateAdapter(data: ApiControllerUpdateAdapterData): CancelablePromise<ApiControllerUpdateAdapterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-adapter',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class ApplicationApiService {
    /**
     * add an application
     * @param data The data for the request.
     * @param data.body The details of the application
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddApplication(data: ApiControllerAddApplicationData): CancelablePromise<ApiControllerAddApplicationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-application',
            body: data.body
        });
    }
    
    /**
     * delete an application
     * @param data The data for the request.
     * @param data.body The details of the application
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteApplication(data: ApiControllerDeleteApplicationData): CancelablePromise<ApiControllerDeleteApplicationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-application',
            body: data.body
        });
    }
    
    /**
     * get the detail of an application
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the application.
     * @returns object_Application The Response object
     * @throws ApiError
     */
    public static apiControllerGetApplication(data: ApiControllerGetApplicationData): CancelablePromise<ApiControllerGetApplicationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-application',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get all applications
     * @param data The data for the request.
     * @param data.owner The owner of applications.
     * @returns object_Application The Response object
     * @throws ApiError
     */
    public static apiControllerGetApplications(data: ApiControllerGetApplicationsData): CancelablePromise<ApiControllerGetApplicationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-applications',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * get the detail of the organization's application
     * @param data The data for the request.
     * @param data.organization The organization name
     * @returns object_Application The Response object
     * @throws ApiError
     */
    public static apiControllerGetOrganizationApplications(data: ApiControllerGetOrganizationApplicationsData): CancelablePromise<ApiControllerGetOrganizationApplicationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-organization-applications',
            query: {
                organization: data.organization
            }
        });
    }
    
    /**
     * get the detail of the user's application
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the user
     * @returns object_Application The Response object
     * @throws ApiError
     */
    public static apiControllerGetUserApplication(data: ApiControllerGetUserApplicationData): CancelablePromise<ApiControllerGetUserApplicationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-user-application',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * update an application
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the application
     * @param data.body The details of the application
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateApplication(data: ApiControllerUpdateApplicationData): CancelablePromise<ApiControllerUpdateApplicationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-application',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class CertApiService {
    /**
     * add cert
     * @param data The data for the request.
     * @param data.body The details of the cert
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddCert(data: ApiControllerAddCertData): CancelablePromise<ApiControllerAddCertResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-cert',
            body: data.body
        });
    }
    
    /**
     * delete cert
     * @param data The data for the request.
     * @param data.body The details of the cert
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteCert(data: ApiControllerDeleteCertData): CancelablePromise<ApiControllerDeleteCertResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-cert',
            body: data.body
        });
    }
    
    /**
     * get cert
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the cert
     * @returns object_Cert The Response object
     * @throws ApiError
     */
    public static apiControllerGetCert(data: ApiControllerGetCertData): CancelablePromise<ApiControllerGetCertResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-cert',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get certs
     * @param data The data for the request.
     * @param data.owner The owner of certs
     * @returns object_Cert The Response object
     * @throws ApiError
     */
    public static apiControllerGetCerts(data: ApiControllerGetCertsData): CancelablePromise<ApiControllerGetCertsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-certs',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * get globle certs
     * @returns object_Cert The Response object
     * @throws ApiError
     */
    public static apiControllerGetGlobalCerts(): CancelablePromise<ApiControllerGetGlobalCertsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-global-certs'
        });
    }
    
    /**
     * update cert
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the cert
     * @param data.body The details of the cert
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateCert(data: ApiControllerUpdateCertData): CancelablePromise<ApiControllerUpdateCertResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-cert',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class EnforcerApiService {
    /**
     * add enforcer
     * @param data The data for the request.
     * @param data.enforcer The enforcer object
     * @returns object_Enforcer
     * @throws ApiError
     */
    public static apiControllerAddEnforcer(data: ApiControllerAddEnforcerData): CancelablePromise<ApiControllerAddEnforcerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-enforcer',
            body: data.enforcer
        });
    }
    
    /**
     * Call Casbin BatchEnforce API
     * @param data The data for the request.
     * @param data.body array of casbin requests
     * @param data.permissionId permission id
     * @param data.modelId model id
     * @param data.owner owner
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerBatchEnforce(data: ApiControllerBatchEnforceData): CancelablePromise<ApiControllerBatchEnforceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/batch-enforce',
            query: {
                permissionId: data.permissionId,
                modelId: data.modelId,
                owner: data.owner
            },
            body: data.body
        });
    }
    
    /**
     * delete enforcer
     * @param data The data for the request.
     * @param data.body The enforcer object
     * @returns object_Enforcer
     * @throws ApiError
     */
    public static apiControllerDeleteEnforcer(data: ApiControllerDeleteEnforcerData): CancelablePromise<ApiControllerDeleteEnforcerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-enforcer',
            body: data.body
        });
    }
    
    /**
     * Call Casbin Enforce API
     * @param data The data for the request.
     * @param data.body Casbin request
     * @param data.permissionId permission id
     * @param data.modelId model id
     * @param data.resourceId resource id
     * @param data.owner owner
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerEnforce(data: ApiControllerEnforceData): CancelablePromise<ApiControllerEnforceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/enforce',
            query: {
                permissionId: data.permissionId,
                modelId: data.modelId,
                resourceId: data.resourceId,
                owner: data.owner
            },
            body: data.body
        });
    }
    
    /**
     * get enforcer
     * @param data The data for the request.
     * @param data.id The id ( owner/name )  of enforcer
     * @returns object_Enforcer
     * @throws ApiError
     */
    public static apiControllerGetEnforcer(data: ApiControllerGetEnforcerData): CancelablePromise<ApiControllerGetEnforcerResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-enforcer',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get enforcers
     * @param data The data for the request.
     * @param data.owner The owner of enforcers
     * @returns object_Enforcer
     * @throws ApiError
     */
    public static apiControllerGetEnforcers(data: ApiControllerGetEnforcersData): CancelablePromise<ApiControllerGetEnforcersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-enforcers',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update enforcer
     * @param data The data for the request.
     * @param data.id The id ( owner/name )  of enforcer
     * @param data.enforcer The enforcer object
     * @returns object_Enforcer
     * @throws ApiError
     */
    public static apiControllerUpdateEnforcer(data: ApiControllerUpdateEnforcerData): CancelablePromise<ApiControllerUpdateEnforcerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-enforcer',
            query: {
                id: data.id
            },
            body: data.enforcer
        });
    }
    
}

export class GroupApiService {
    /**
     * add group
     * @param data The data for the request.
     * @param data.body The details of the group
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddGroup(data: ApiControllerAddGroupData): CancelablePromise<ApiControllerAddGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-group',
            body: data.body
        });
    }
    
    /**
     * delete group
     * @param data The data for the request.
     * @param data.body The details of the group
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteGroup(data: ApiControllerDeleteGroupData): CancelablePromise<ApiControllerDeleteGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-group',
            body: data.body
        });
    }
    
    /**
     * get group
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the group
     * @returns object_Group The Response object
     * @throws ApiError
     */
    public static apiControllerGetGroup(data: ApiControllerGetGroupData): CancelablePromise<ApiControllerGetGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-group',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get groups
     * @param data The data for the request.
     * @param data.owner The owner of groups
     * @returns object_Group The Response object
     * @throws ApiError
     */
    public static apiControllerGetGroups(data: ApiControllerGetGroupsData): CancelablePromise<ApiControllerGetGroupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-groups',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update group
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the group
     * @param data.body The details of the group
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateGroup(data: ApiControllerUpdateGroupData): CancelablePromise<ApiControllerUpdateGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-group',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class InvitationApiService {
    /**
     * add invitation
     * @param data The data for the request.
     * @param data.body The details of the invitation
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddInvitation(data: ApiControllerAddInvitationData): CancelablePromise<ApiControllerAddInvitationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-invitation',
            body: data.body
        });
    }
    
    /**
     * delete invitation
     * @param data The data for the request.
     * @param data.body The details of the invitation
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteInvitation(data: ApiControllerDeleteInvitationData): CancelablePromise<ApiControllerDeleteInvitationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-invitation',
            body: data.body
        });
    }
    
    /**
     * get invitation
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the invitation
     * @returns object_Invitation The Response object
     * @throws ApiError
     */
    public static apiControllerGetInvitation(data: ApiControllerGetInvitationData): CancelablePromise<ApiControllerGetInvitationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-invitation',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get invitations
     * @param data The data for the request.
     * @param data.owner The owner of invitations
     * @returns object_Invitation The Response object
     * @throws ApiError
     */
    public static apiControllerGetInvitations(data: ApiControllerGetInvitationsData): CancelablePromise<ApiControllerGetInvitationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-invitations',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update invitation
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the invitation
     * @param data.body The details of the invitation
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateInvitation(data: ApiControllerUpdateInvitationData): CancelablePromise<ApiControllerUpdateInvitationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-invitation',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
    /**
     * verify invitation
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the invitation
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerVerifyInvitation(data: ApiControllerVerifyInvitationData): CancelablePromise<ApiControllerVerifyInvitationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/verify-invitation',
            query: {
                id: data.id
            }
        });
    }
    
}

export class AccountApiService {
    /**
     * add ldap
     * @param data The data for the request.
     * @param data.body The details of the ldap
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddLdap(data: ApiControllerAddLdapData): CancelablePromise<ApiControllerAddLdapResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-ldap',
            body: data.body
        });
    }
    
    /**
     * delete ldap
     * @param data The data for the request.
     * @param data.body The details of the ldap
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteLdap(data: ApiControllerDeleteLdapData): CancelablePromise<ApiControllerDeleteLdapResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-ldap',
            body: data.body
        });
    }
    
    /**
     * get the details of the current account
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerGetAccount(): CancelablePromise<ApiControllerGetAccountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-account'
        });
    }
    
    /**
     * get ldap
     * @param data The data for the request.
     * @param data.id id
     * @returns object_Ldap The Response object
     * @throws ApiError
     */
    public static apiControllerGetLdap(data: ApiControllerGetLdapData): CancelablePromise<ApiControllerGetLdapResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-ldap',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get ldap users
     * @returns controllers_LdapResp The Response object
     * @throws ApiError
     */
    public static apiControllerGetLdapser(): CancelablePromise<ApiControllerGetLdapserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-ldap-users'
        });
    }
    
    /**
     * get ldaps
     * @param data The data for the request.
     * @param data.owner owner
     * @returns object_Ldap The Response object
     * @throws ApiError
     */
    public static apiControllerGetLdaps(data: ApiControllerGetLdapsData = {}): CancelablePromise<ApiControllerGetLdapsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-ldaps',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerResetEmailOrPhone(): CancelablePromise<ApiControllerResetEmailOrPhoneResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/reset-email-or-phone'
        });
    }
    
    /**
     * set password
     * @param data The data for the request.
     * @param data.userOwner The owner of the user
     * @param data.userName The name of the user
     * @param data.oldPassword The old password of the user
     * @param data.newPassword The new password of the user
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerSetPassword(data: ApiControllerSetPasswordData): CancelablePromise<ApiControllerSetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/set-password',
            formData: {
                userOwner: data.userOwner,
                userName: data.userName,
                oldPassword: data.oldPassword,
                newPassword: data.newPassword
            }
        });
    }
    
    /**
     * sync ldap users
     * @param data The data for the request.
     * @param data.id id
     * @returns controllers_LdapSyncResp The Response object
     * @throws ApiError
     */
    public static apiControllerSyncLdapUsers(data: ApiControllerSyncLdapUsersData): CancelablePromise<ApiControllerSyncLdapUsersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/sync-ldap-users',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * update ldap
     * @param data The data for the request.
     * @param data.body The details of the ldap
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateLdap(data: ApiControllerUpdateLdapData): CancelablePromise<ApiControllerUpdateLdapResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-ldap',
            body: data.body
        });
    }
    
    /**
     * return Laravel compatible user information according to OAuth 2.0
     * @returns controllers_LaravelResponse The Response object
     * @throws ApiError
     */
    public static apiControllerUserInfo2(): CancelablePromise<ApiControllerUserInfo2Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/user'
        });
    }
    
    /**
     * return user information according to OIDC standards
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerUserInfo(): CancelablePromise<ApiControllerUserInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/userinfo'
        });
    }
    
}

export class ModelApiService {
    /**
     * add model
     * @param data The data for the request.
     * @param data.body The details of the model
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddModel(data: ApiControllerAddModelData): CancelablePromise<ApiControllerAddModelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-model',
            body: data.body
        });
    }
    
    /**
     * delete model
     * @param data The data for the request.
     * @param data.body The details of the model
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteModel(data: ApiControllerDeleteModelData): CancelablePromise<ApiControllerDeleteModelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-model',
            body: data.body
        });
    }
    
    /**
     * get model
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the model
     * @returns object_Model The Response object
     * @throws ApiError
     */
    public static apiControllerGetModel(data: ApiControllerGetModelData): CancelablePromise<ApiControllerGetModelResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-model',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get models
     * @param data The data for the request.
     * @param data.owner The owner of models
     * @returns object_Model The Response object
     * @throws ApiError
     */
    public static apiControllerGetModels(data: ApiControllerGetModelsData): CancelablePromise<ApiControllerGetModelsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-models',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update model
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the model
     * @param data.body The details of the model
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateModel(data: ApiControllerUpdateModelData): CancelablePromise<ApiControllerUpdateModelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-model',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class OrganizationApiService {
    /**
     * add organization
     * @param data The data for the request.
     * @param data.body The details of the organization
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddOrganization(data: ApiControllerAddOrganizationData): CancelablePromise<ApiControllerAddOrganizationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-organization',
            body: data.body
        });
    }
    
    /**
     * delete organization
     * @param data The data for the request.
     * @param data.body The details of the organization
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteOrganization(data: ApiControllerDeleteOrganizationData): CancelablePromise<ApiControllerDeleteOrganizationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-organization',
            body: data.body
        });
    }
    
    /**
     * get default application
     * @param data The data for the request.
     * @param data.id organization id
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerGetDefaultApplication(data: ApiControllerGetDefaultApplicationData): CancelablePromise<ApiControllerGetDefaultApplicationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-default-application',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get organization
     * @param data The data for the request.
     * @param data.id organization id
     * @returns object_Organization The Response object
     * @throws ApiError
     */
    public static apiControllerGetOrganization(data: ApiControllerGetOrganizationData): CancelablePromise<ApiControllerGetOrganizationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-organization',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get all organization name and displayName
     * @param data The data for the request.
     * @param data.owner owner
     * @returns object_Organization The Response object
     * @throws ApiError
     */
    public static apiControllerGetOrganizationNames(data: ApiControllerGetOrganizationNamesData): CancelablePromise<ApiControllerGetOrganizationNamesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-organization-names',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * get organizations
     * @param data The data for the request.
     * @param data.owner owner
     * @returns object_Organization The Response object
     * @throws ApiError
     */
    public static apiControllerGetOrganizations(data: ApiControllerGetOrganizationsData): CancelablePromise<ApiControllerGetOrganizationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-organizations',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update organization
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the organization
     * @param data.body The details of the organization
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateOrganization(data: ApiControllerUpdateOrganizationData): CancelablePromise<ApiControllerUpdateOrganizationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-organization',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class PaymentApiService {
    /**
     * add payment
     * @param data The data for the request.
     * @param data.body The details of the payment
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddPayment(data: ApiControllerAddPaymentData): CancelablePromise<ApiControllerAddPaymentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-payment',
            body: data.body
        });
    }
    
    /**
     * delete payment
     * @param data The data for the request.
     * @param data.body The details of the payment
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeletePayment(data: ApiControllerDeletePaymentData): CancelablePromise<ApiControllerDeletePaymentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-payment',
            body: data.body
        });
    }
    
    /**
     * get payment
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the payment
     * @returns object_Payment The Response object
     * @throws ApiError
     */
    public static apiControllerGetPayment(data: ApiControllerGetPaymentData): CancelablePromise<ApiControllerGetPaymentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-payment',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get payments
     * @param data The data for the request.
     * @param data.owner The owner of payments
     * @returns object_Payment The Response object
     * @throws ApiError
     */
    public static apiControllerGetPayments(data: ApiControllerGetPaymentsData): CancelablePromise<ApiControllerGetPaymentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-payments',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * get payments for a user
     * @param data The data for the request.
     * @param data.owner The owner of payments
     * @param data.organization The organization of the user
     * @param data.user The username of the user
     * @returns object_Payment The Response object
     * @throws ApiError
     */
    public static apiControllerGetUserPayments(data: ApiControllerGetUserPaymentsData): CancelablePromise<ApiControllerGetUserPaymentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-user-payments',
            query: {
                owner: data.owner,
                organization: data.organization,
                user: data.user
            }
        });
    }
    
    /**
     * invoice payment
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the payment
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerInvoicePayment(data: ApiControllerInvoicePaymentData): CancelablePromise<ApiControllerInvoicePaymentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/invoice-payment',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * notify payment
     * @param data The data for the request.
     * @param data.body The details of the payment
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerNotifyPayment(data: ApiControllerNotifyPaymentData): CancelablePromise<ApiControllerNotifyPaymentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/notify-payment',
            body: data.body
        });
    }
    
    /**
     * update payment
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the payment
     * @param data.body The details of the payment
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdatePayment(data: ApiControllerUpdatePaymentData): CancelablePromise<ApiControllerUpdatePaymentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-payment',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class PermissionApiService {
    /**
     * add permission
     * @param data The data for the request.
     * @param data.body The details of the permission
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddPermission(data: ApiControllerAddPermissionData): CancelablePromise<ApiControllerAddPermissionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-permission',
            body: data.body
        });
    }
    
    /**
     * delete permission
     * @param data The data for the request.
     * @param data.body The details of the permission
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeletePermission(data: ApiControllerDeletePermissionData): CancelablePromise<ApiControllerDeletePermissionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-permission',
            body: data.body
        });
    }
    
    /**
     * get permission
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the permission
     * @returns object_Permission The Response object
     * @throws ApiError
     */
    public static apiControllerGetPermission(data: ApiControllerGetPermissionData): CancelablePromise<ApiControllerGetPermissionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-permission',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get permissions
     * @param data The data for the request.
     * @param data.owner The owner of permissions
     * @returns object_Permission The Response object
     * @throws ApiError
     */
    public static apiControllerGetPermissions(data: ApiControllerGetPermissionsData): CancelablePromise<ApiControllerGetPermissionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-permissions',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * get permissions by role
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the role
     * @returns object_Permission The Response object
     * @throws ApiError
     */
    public static apiControllerGetPermissionsByRole(data: ApiControllerGetPermissionsByRoleData): CancelablePromise<ApiControllerGetPermissionsByRoleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-permissions-by-role',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get permissions by submitter
     * @returns object_Permission The Response object
     * @throws ApiError
     */
    public static apiControllerGetPermissionsBySubmitter(): CancelablePromise<ApiControllerGetPermissionsBySubmitterResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-permissions-by-submitter'
        });
    }
    
    /**
     * update permission
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the permission
     * @param data.body The details of the permission
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdatePermission(data: ApiControllerUpdatePermissionData): CancelablePromise<ApiControllerUpdatePermissionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-permission',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class PlanApiService {
    /**
     * add plan
     * @param data The data for the request.
     * @param data.body The details of the plan
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddPlan(data: ApiControllerAddPlanData): CancelablePromise<ApiControllerAddPlanResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-plan',
            body: data.body
        });
    }
    
    /**
     * delete plan
     * @param data The data for the request.
     * @param data.body The details of the plan
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeletePlan(data: ApiControllerDeletePlanData): CancelablePromise<ApiControllerDeletePlanResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-plan',
            body: data.body
        });
    }
    
    /**
     * get plan
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the plan
     * @param data.includeOption Should include plan's option
     * @returns object_Plan The Response object
     * @throws ApiError
     */
    public static apiControllerGetPlan(data: ApiControllerGetPlanData): CancelablePromise<ApiControllerGetPlanResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-plan',
            query: {
                id: data.id,
                includeOption: data.includeOption
            }
        });
    }
    
    /**
     * get plans
     * @param data The data for the request.
     * @param data.owner The owner of plans
     * @returns object_Plan The Response object
     * @throws ApiError
     */
    public static apiControllerGetPlans(data: ApiControllerGetPlansData): CancelablePromise<ApiControllerGetPlansResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-plans',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update plan
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the plan
     * @param data.body The details of the plan
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdatePlan(data: ApiControllerUpdatePlanData): CancelablePromise<ApiControllerUpdatePlanResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-plan',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class PricingApiService {
    /**
     * add pricing
     * @param data The data for the request.
     * @param data.body The details of the pricing
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddPricing(data: ApiControllerAddPricingData): CancelablePromise<ApiControllerAddPricingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-pricing',
            body: data.body
        });
    }
    
    /**
     * delete pricing
     * @param data The data for the request.
     * @param data.body The details of the pricing
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeletePricing(data: ApiControllerDeletePricingData): CancelablePromise<ApiControllerDeletePricingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-pricing',
            body: data.body
        });
    }
    
    /**
     * get pricing
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the pricing
     * @returns object_Pricing The Response object
     * @throws ApiError
     */
    public static apiControllerGetPricing(data: ApiControllerGetPricingData): CancelablePromise<ApiControllerGetPricingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-pricing',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get pricings
     * @param data The data for the request.
     * @param data.owner The owner of pricings
     * @returns object_Pricing The Response object
     * @throws ApiError
     */
    public static apiControllerGetPricings(data: ApiControllerGetPricingsData): CancelablePromise<ApiControllerGetPricingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-pricings',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update pricing
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the pricing
     * @param data.body The details of the pricing
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdatePricing(data: ApiControllerUpdatePricingData): CancelablePromise<ApiControllerUpdatePricingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-pricing',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class ProductApiService {
    /**
     * add product
     * @param data The data for the request.
     * @param data.body The details of the product
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddProduct(data: ApiControllerAddProductData): CancelablePromise<ApiControllerAddProductResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-product',
            body: data.body
        });
    }
    
    /**
     * buy product
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the product
     * @param data.providerName The name of the provider
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerBuyProduct(data: ApiControllerBuyProductData): CancelablePromise<ApiControllerBuyProductResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/buy-product',
            query: {
                id: data.id,
                providerName: data.providerName
            }
        });
    }
    
    /**
     * delete product
     * @param data The data for the request.
     * @param data.body The details of the product
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteProduct(data: ApiControllerDeleteProductData): CancelablePromise<ApiControllerDeleteProductResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-product',
            body: data.body
        });
    }
    
    /**
     * get product
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the product
     * @returns object_Product The Response object
     * @throws ApiError
     */
    public static apiControllerGetProduct(data: ApiControllerGetProductData): CancelablePromise<ApiControllerGetProductResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-product',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get products
     * @param data The data for the request.
     * @param data.owner The owner of products
     * @returns object_Product The Response object
     * @throws ApiError
     */
    public static apiControllerGetProducts(data: ApiControllerGetProductsData): CancelablePromise<ApiControllerGetProductsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-products',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update product
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the product
     * @param data.body The details of the product
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateProduct(data: ApiControllerUpdateProductData): CancelablePromise<ApiControllerUpdateProductResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-product',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class ProviderApiService {
    /**
     * add provider
     * @param data The data for the request.
     * @param data.body The details of the provider
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddProvider(data: ApiControllerAddProviderData): CancelablePromise<ApiControllerAddProviderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-provider',
            body: data.body
        });
    }
    
    /**
     * delete provider
     * @param data The data for the request.
     * @param data.body The details of the provider
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteProvider(data: ApiControllerDeleteProviderData): CancelablePromise<ApiControllerDeleteProviderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-provider',
            body: data.body
        });
    }
    
    /**
     * get Global providers
     * @returns object_Provider The Response object
     * @throws ApiError
     */
    public static apiControllerGetGlobalProviders(): CancelablePromise<ApiControllerGetGlobalProvidersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-global-providers'
        });
    }
    
    /**
     * get provider
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the provider
     * @returns object_Provider The Response object
     * @throws ApiError
     */
    public static apiControllerGetProvider(data: ApiControllerGetProviderData): CancelablePromise<ApiControllerGetProviderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-provider',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get providers
     * @param data The data for the request.
     * @param data.owner The owner of providers
     * @returns object_Provider The Response object
     * @throws ApiError
     */
    public static apiControllerGetProviders(data: ApiControllerGetProvidersData): CancelablePromise<ApiControllerGetProvidersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-providers',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update provider
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the provider
     * @param data.body The details of the provider
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateProvider(data: ApiControllerUpdateProviderData): CancelablePromise<ApiControllerUpdateProviderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-provider',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class ResourceApiService {
    /**
     * @param data The data for the request.
     * @param data.resource Resource object
     * @returns controllers_Response Success or error
     * @throws ApiError
     */
    public static apiControllerAddResource(data: ApiControllerAddResourceData): CancelablePromise<ApiControllerAddResourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-resource',
            body: data.resource
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.resource Resource object
     * @returns controllers_Response Success or error
     * @throws ApiError
     */
    public static apiControllerDeleteResource(data: ApiControllerDeleteResourceData): CancelablePromise<ApiControllerDeleteResourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-resource',
            body: data.resource
        });
    }
    
    /**
     * get resource
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of resource
     * @returns object_Resource The Response object
     * @throws ApiError
     */
    public static apiControllerGetResource(data: ApiControllerGetResourceData): CancelablePromise<ApiControllerGetResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-resource',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get resources
     * @param data The data for the request.
     * @param data.owner Owner
     * @param data.user User
     * @param data.pageSize Page Size
     * @param data.p Page Number
     * @param data.field Field
     * @param data.value Value
     * @param data.sortField Sort Field
     * @param data.sortOrder Sort Order
     * @returns object_Resource The Response object
     * @throws ApiError
     */
    public static apiControllerGetResources(data: ApiControllerGetResourcesData): CancelablePromise<ApiControllerGetResourcesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-resources',
            query: {
                owner: data.owner,
                user: data.user,
                pageSize: data.pageSize,
                p: data.p,
                field: data.field,
                value: data.value,
                sortField: data.sortField,
                sortOrder: data.sortOrder
            }
        });
    }
    
    /**
     * get resource
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of resource
     * @param data.resource The resource object
     * @returns controllers_Response Success or error
     * @throws ApiError
     */
    public static apiControllerUpdateResource(data: ApiControllerUpdateResourceData): CancelablePromise<ApiControllerUpdateResourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-resource',
            query: {
                id: data.id
            },
            body: data.resource
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.owner Owner
     * @param data.user User
     * @param data.application Application
     * @param data.fullFilePath Full File Path
     * @param data.file Resource file
     * @param data.tag Tag
     * @param data.parent Parent
     * @param data.createdTime Created Time
     * @param data.description Description
     * @returns object_Resource FileUrl, objectKey
     * @throws ApiError
     */
    public static apiControllerUploadResource(data: ApiControllerUploadResourceData): CancelablePromise<ApiControllerUploadResourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/upload-resource',
            query: {
                owner: data.owner,
                user: data.user,
                application: data.application,
                tag: data.tag,
                parent: data.parent,
                fullFilePath: data.fullFilePath,
                createdTime: data.createdTime,
                description: data.description
            },
            formData: {
                file: data.file
            }
        });
    }
    
}

export class RoleApiService {
    /**
     * add role
     * @param data The data for the request.
     * @param data.body The details of the role
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddRole(data: ApiControllerAddRoleData): CancelablePromise<ApiControllerAddRoleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-role',
            body: data.body
        });
    }
    
    /**
     * delete role
     * @param data The data for the request.
     * @param data.body The details of the role
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteRole(data: ApiControllerDeleteRoleData): CancelablePromise<ApiControllerDeleteRoleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-role',
            body: data.body
        });
    }
    
    /**
     * get role
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the role
     * @returns object_Role The Response object
     * @throws ApiError
     */
    public static apiControllerGetRole(data: ApiControllerGetRoleData): CancelablePromise<ApiControllerGetRoleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-role',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get roles
     * @param data The data for the request.
     * @param data.owner The owner of roles
     * @returns object_Role The Response object
     * @throws ApiError
     */
    public static apiControllerGetRoles(data: ApiControllerGetRolesData): CancelablePromise<ApiControllerGetRolesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-roles',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update role
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the role
     * @param data.body The details of the role
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateRole(data: ApiControllerUpdateRoleData): CancelablePromise<ApiControllerUpdateRoleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-role',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class SessionApiService {
    /**
     * Add session for one user in one application. If there are other existing sessions, join the session into the list.
     * @param data The data for the request.
     * @param data.id The id(organization/application/user) of session
     * @param data.sessionId sessionId to be added
     * @returns string The Response object
     * @throws ApiError
     */
    public static apiControllerAddSession(data: ApiControllerAddSessionData): CancelablePromise<ApiControllerAddSessionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-session',
            query: {
                id: data.id,
                sessionId: data.sessionId
            }
        });
    }
    
    /**
     * Delete session for one user in one application.
     * @param data The data for the request.
     * @param data.id The id(organization/application/user) of session
     * @returns string The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteSession(data: ApiControllerDeleteSessionData): CancelablePromise<ApiControllerDeleteSessionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-session',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * Get session for one user in one application.
     * @param data The data for the request.
     * @param data.id The id(organization/application/user) of session
     * @returns string The Response object
     * @throws ApiError
     */
    public static apiControllerGetSingleSession(data: ApiControllerGetSingleSessionData): CancelablePromise<ApiControllerGetSingleSessionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-session',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * Get organization user sessions.
     * @param data The data for the request.
     * @param data.owner The organization name
     * @returns string The Response object
     * @throws ApiError
     */
    public static apiControllerGetSessions(data: ApiControllerGetSessionsData): CancelablePromise<ApiControllerGetSessionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-sessions',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * Check if there are other different sessions for one user in one application.
     * @param data The data for the request.
     * @param data.id The id(organization/application/user) of session
     * @param data.sessionId sessionId to be checked
     * @returns string The Response object
     * @throws ApiError
     */
    public static apiControllerIsSessionDuplicated(data: ApiControllerIsSessionDuplicatedData): CancelablePromise<ApiControllerIsSessionDuplicatedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/is-session-duplicated',
            query: {
                id: data.id,
                sessionId: data.sessionId
            }
        });
    }
    
    /**
     * Update session for one user in one application.
     * @param data The data for the request.
     * @param data.id The id(organization/application/user) of session
     * @returns string The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateSession(data: ApiControllerUpdateSessionData): CancelablePromise<ApiControllerUpdateSessionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-session',
            query: {
                id: data.id
            }
        });
    }
    
}

export class SubscriptionApiService {
    /**
     * add subscription
     * @param data The data for the request.
     * @param data.body The details of the subscription
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddSubscription(data: ApiControllerAddSubscriptionData): CancelablePromise<ApiControllerAddSubscriptionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-subscription',
            body: data.body
        });
    }
    
    /**
     * delete subscription
     * @param data The data for the request.
     * @param data.body The details of the subscription
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteSubscription(data: ApiControllerDeleteSubscriptionData): CancelablePromise<ApiControllerDeleteSubscriptionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-subscription',
            body: data.body
        });
    }
    
    /**
     * get subscription
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the subscription
     * @returns object_Subscription The Response object
     * @throws ApiError
     */
    public static apiControllerGetSubscription(data: ApiControllerGetSubscriptionData): CancelablePromise<ApiControllerGetSubscriptionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-subscription',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get subscriptions
     * @param data The data for the request.
     * @param data.owner The owner of subscriptions
     * @returns object_Subscription The Response object
     * @throws ApiError
     */
    public static apiControllerGetSubscriptions(data: ApiControllerGetSubscriptionsData): CancelablePromise<ApiControllerGetSubscriptionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-subscriptions',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update subscription
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the subscription
     * @param data.body The details of the subscription
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateSubscription(data: ApiControllerUpdateSubscriptionData): CancelablePromise<ApiControllerUpdateSubscriptionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-subscription',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class SyncerApiService {
    /**
     * add syncer
     * @param data The data for the request.
     * @param data.body The details of the syncer
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddSyncer(data: ApiControllerAddSyncerData): CancelablePromise<ApiControllerAddSyncerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-syncer',
            body: data.body
        });
    }
    
    /**
     * delete syncer
     * @param data The data for the request.
     * @param data.body The details of the syncer
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteSyncer(data: ApiControllerDeleteSyncerData): CancelablePromise<ApiControllerDeleteSyncerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-syncer',
            body: data.body
        });
    }
    
    /**
     * get syncer
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the syncer
     * @returns object_Syncer The Response object
     * @throws ApiError
     */
    public static apiControllerGetSyncer(data: ApiControllerGetSyncerData): CancelablePromise<ApiControllerGetSyncerResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-syncer',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get syncers
     * @param data The data for the request.
     * @param data.owner The owner of syncers
     * @returns object_Syncer The Response object
     * @throws ApiError
     */
    public static apiControllerGetSyncers(data: ApiControllerGetSyncersData): CancelablePromise<ApiControllerGetSyncersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-syncers',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * run syncer
     * @param data The data for the request.
     * @param data.body The details of the syncer
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerRunSyncer(data: ApiControllerRunSyncerData): CancelablePromise<ApiControllerRunSyncerResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/run-syncer',
            body: data.body
        });
    }
    
    /**
     * update syncer
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the syncer
     * @param data.body The details of the syncer
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateSyncer(data: ApiControllerUpdateSyncerData): CancelablePromise<ApiControllerUpdateSyncerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-syncer',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class TokenApiService {
    /**
     * add token
     * @param data The data for the request.
     * @param data.body Details of the token
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddToken(data: ApiControllerAddTokenData): CancelablePromise<ApiControllerAddTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-token',
            body: data.body
        });
    }
    
    /**
     * delete token
     * @param data The data for the request.
     * @param data.body Details of the token
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteToken(data: ApiControllerDeleteTokenData): CancelablePromise<ApiControllerDeleteTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-token',
            body: data.body
        });
    }
    
    /**
     * Get Login Error Counts
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of user
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerGetCaptchaStatus(data: ApiControllerGetCaptchaStatusData): CancelablePromise<ApiControllerGetCaptchaStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-captcha-status',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get token
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of token
     * @returns object_Token The Response object
     * @throws ApiError
     */
    public static apiControllerGetToken(data: ApiControllerGetTokenData): CancelablePromise<ApiControllerGetTokenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-token',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get tokens
     * @param data The data for the request.
     * @param data.owner The owner of tokens
     * @param data.pageSize The size of each page
     * @param data.p The number of the page
     * @returns object_Token The Response object
     * @throws ApiError
     */
    public static apiControllerGetTokens(data: ApiControllerGetTokensData): CancelablePromise<ApiControllerGetTokensResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-tokens',
            query: {
                owner: data.owner,
                pageSize: data.pageSize,
                p: data.p
            }
        });
    }
    
    /**
     * get OAuth access token
     * @param data The data for the request.
     * @param data.grantType OAuth grant type
     * @param data.clientId OAuth client id
     * @param data.clientSecret OAuth client secret
     * @param data.code OAuth code
     * @returns object_TokenWrapper The Response object
     * @throws ApiError
     */
    public static apiControllerGetOauthToken(data: ApiControllerGetOauthTokenData): CancelablePromise<ApiControllerGetOauthTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/login/oauth/access_token',
            query: {
                grant_type: data.grantType,
                client_id: data.clientId,
                client_secret: data.clientSecret,
                code: data.code
            },
            errors: {
                400: 'The Response object',
                401: 'The Response object'
            }
        });
    }
    
    /**
     * refresh OAuth access token
     * @param data The data for the request.
     * @param data.grantType OAuth grant type
     * @param data.refreshToken OAuth refresh token
     * @param data.scope OAuth scope
     * @param data.clientId OAuth client id
     * @param data.clientSecret OAuth client secret
     * @returns object_TokenWrapper The Response object
     * @throws ApiError
     */
    public static apiControllerRefreshToken(data: ApiControllerRefreshTokenData): CancelablePromise<ApiControllerRefreshTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/login/oauth/refresh_token',
            query: {
                grant_type: data.grantType,
                refresh_token: data.refreshToken,
                scope: data.scope,
                client_id: data.clientId,
                client_secret: data.clientSecret
            },
            errors: {
                400: 'The Response object',
                401: 'The Response object'
            }
        });
    }
    
    /**
     * update token
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of token
     * @param data.body Details of the token
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateToken(data: ApiControllerUpdateTokenData): CancelablePromise<ApiControllerUpdateTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-token',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class UserApiService {
    /**
     * add user
     * @param data The data for the request.
     * @param data.body The details of the user
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddUser(data: ApiControllerAddUserData): CancelablePromise<ApiControllerAddUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-user',
            body: data.body
        });
    }
    
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerAddUserKeys(): CancelablePromise<ApiControllerAddUserKeysResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-user-keys'
        });
    }
    
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerCheckUserPassword(): CancelablePromise<ApiControllerCheckUserPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/check-user-password'
        });
    }
    
    /**
     * delete user
     * @param data The data for the request.
     * @param data.body The details of the user
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteUser(data: ApiControllerDeleteUserData): CancelablePromise<ApiControllerDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-user',
            body: data.body
        });
    }
    
    /**
     * get email and phone by username
     * @param data The data for the request.
     * @param data.username The username of the user
     * @param data.organization The organization of the user
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerGetEmailAndPhone(data: ApiControllerGetEmailAndPhoneData): CancelablePromise<ApiControllerGetEmailAndPhoneResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-email-and-phone',
            formData: {
                username: data.username,
                organization: data.organization
            }
        });
    }
    
    /**
     * get global users
     * @returns object_User The Response object
     * @throws ApiError
     */
    public static apiControllerGetGlobalUsers(): CancelablePromise<ApiControllerGetGlobalUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-global-users'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.owner The owner of users
     * @param data.sorter The DB column name to sort by, e.g., created_time
     * @param data.limit The count of users to return, e.g., 25
     * @returns object_User The Response object
     * @throws ApiError
     */
    public static apiControllerGetSortedUsers(data: ApiControllerGetSortedUsersData): CancelablePromise<ApiControllerGetSortedUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-sorted-users',
            query: {
                owner: data.owner,
                sorter: data.sorter,
                limit: data.limit
            }
        });
    }
    
    /**
     * get user
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the user
     * @param data.owner The owner of the user
     * @param data.email The email of the user
     * @param data.phone The phone of the user
     * @param data.userId The userId of the user
     * @returns object_User The Response object
     * @throws ApiError
     */
    public static apiControllerGetUser(data: ApiControllerGetUserData = {}): CancelablePromise<ApiControllerGetUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-user',
            query: {
                id: data.id,
                owner: data.owner,
                email: data.email,
                phone: data.phone,
                userId: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.owner The owner of users
     * @param data.isOnline The filter for query, 1 for online, 0 for offline, empty string for all users
     * @returns unknown {int} int The count of filtered users for an organization
     * @throws ApiError
     */
    public static apiControllerGetUserCount(data: ApiControllerGetUserCountData): CancelablePromise<ApiControllerGetUserCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-user-count',
            query: {
                owner: data.owner,
                isOnline: data.isOnline
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.owner The owner of users
     * @returns object_User The Response object
     * @throws ApiError
     */
    public static apiControllerGetUsers(data: ApiControllerGetUsersData): CancelablePromise<ApiControllerGetUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-users',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update user
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the user
     * @param data.body The details of the user
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateUser(data: ApiControllerUpdateUserData): CancelablePromise<ApiControllerUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-user',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
    /**
     * WebAuthn Registration Flow 1st stage
     * @returns protocol_CredentialCreation The CredentialCreationOptions object
     * @throws ApiError
     */
    public static apiControllerWebAuthnSignupBegin(): CancelablePromise<ApiControllerWebAuthnSignupBeginResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/webauthn/signup/begin'
        });
    }
    
    /**
     * WebAuthn Registration Flow 2nd stage
     * @param data The data for the request.
     * @param data.body authenticator attestation Response
     * @returns controllers_Response "The Response object"
     * @throws ApiError
     */
    public static apiControllerWebAuthnSignupFinish(data: ApiControllerWebAuthnSignupFinishData): CancelablePromise<ApiControllerWebAuthnSignupFinishResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/webauthn/signup/finish',
            body: data.body
        });
    }
    
}

export class WebhookApiService {
    /**
     * add webhook
     * @param data The data for the request.
     * @param data.body The details of the webhook
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerAddWebhook(data: ApiControllerAddWebhookData): CancelablePromise<ApiControllerAddWebhookResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/add-webhook',
            body: data.body
        });
    }
    
    /**
     * delete webhook
     * @param data The data for the request.
     * @param data.body The details of the webhook
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteWebhook(data: ApiControllerDeleteWebhookData): CancelablePromise<ApiControllerDeleteWebhookResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-webhook',
            body: data.body
        });
    }
    
    /**
     * get webhook
     * @param data The data for the request.
     * @param data.id The id ( owner/name ) of the webhook
     * @returns object_Webhook The Response object
     * @throws ApiError
     */
    public static apiControllerGetWebhook(data: ApiControllerGetWebhookData): CancelablePromise<ApiControllerGetWebhookResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-webhook',
            query: {
                id: data.id
            }
        });
    }
    
    /**
     * get webhooks
     * @param data The data for the request.
     * @param data.owner The owner of webhooks
     * @returns object_Webhook The Response object
     * @throws ApiError
     */
    public static apiControllerGetWebhooks(data: ApiControllerGetWebhooksData): CancelablePromise<ApiControllerGetWebhooksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-webhooks',
            query: {
                owner: data.owner
            }
        });
    }
    
    /**
     * update webhook
     * @param data The data for the request.
     * @param data.body The details of the webhook
     * @param data.id The id ( owner/name ) of the webhook
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerUpdateWebhook(data: ApiControllerUpdateWebhookData): CancelablePromise<ApiControllerUpdateWebhookResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/update-webhook',
            query: {
                id: data.id
            },
            body: data.body
        });
    }
    
}

export class MfaApiService {
    /**
     * : Delete MFA
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerDeleteMfa(): CancelablePromise<ApiControllerDeleteMfaResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/delete-mfa/'
        });
    }
    
    /**
     * enable totp
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerMfaSetupEnable(): CancelablePromise<ApiControllerMfaSetupEnableResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/mfa/setup/enable'
        });
    }
    
    /**
     * setup MFA
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerMfaSetupInitiate(): CancelablePromise<ApiControllerMfaSetupInitiateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/mfa/setup/initiate'
        });
    }
    
    /**
     * setup verify totp
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerMfaSetupVerify(): CancelablePromise<ApiControllerMfaSetupVerifyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/mfa/setup/verify'
        });
    }
    
    /**
     * : Set specific Mfa Preferred
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerSetPreferredMfa(): CancelablePromise<ApiControllerSetPreferredMfaResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/set-preferred-mfa'
        });
    }
    
}

export class LoginApiService {
    /**
     * get application login
     * @param data The data for the request.
     * @param data.clientId client id
     * @param data.responseType response type
     * @param data.redirectUri redirect uri
     * @param data.scope scope
     * @param data.state state
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerGetApplicationLogin(data: ApiControllerGetApplicationLoginData): CancelablePromise<ApiControllerGetApplicationLoginResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-app-login',
            query: {
                clientId: data.clientId,
                responseType: data.responseType,
                redirectUri: data.redirectUri,
                scope: data.scope,
                state: data.state
            }
        });
    }
    
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerGetCaptcha(): CancelablePromise<ApiControllerGetCaptchaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-captcha'
        });
    }
    
    /**
     * login
     * @param data The data for the request.
     * @param data.clientId clientId
     * @param data.responseType responseType
     * @param data.redirectUri redirectUri
     * @param data.form Login information
     * @param data.scope scope
     * @param data.state state
     * @param data.nonce nonce
     * @param data.codeChallengeMethod code_challenge_method
     * @param data.codeChallenge code_challenge
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerLogin(data: ApiControllerLoginData): CancelablePromise<ApiControllerLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/login',
            query: {
                clientId: data.clientId,
                responseType: data.responseType,
                redirectUri: data.redirectUri,
                scope: data.scope,
                state: data.state,
                nonce: data.nonce,
                code_challenge_method: data.codeChallengeMethod,
                code_challenge: data.codeChallenge
            },
            body: data.form
        });
    }
    
    /**
     * The introspection endpoint is an OAuth 2.0 endpoint that takes a
     * @param data The data for the request.
     * @param data.token access_token's value or refresh_token's value
     * @param data.tokenTypeHint the token type access_token or refresh_token
     * @returns object_IntrospectionResponse The Response object
     * @throws ApiError
     */
    public static apiControllerIntrospectToken(data: ApiControllerIntrospectTokenData): CancelablePromise<ApiControllerIntrospectTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/login/oauth/introspect',
            formData: {
                token: data.token,
                token_type_hint: data.tokenTypeHint
            },
            errors: {
                400: 'The Response object',
                401: 'The Response object'
            }
        });
    }
    
    /**
     * logout the current user
     * @param data The data for the request.
     * @param data.idTokenHint id_token_hint
     * @param data.postLogoutRedirectUri post_logout_redirect_uri
     * @param data.state state
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerLogout(data: ApiControllerLogoutData = {}): CancelablePromise<ApiControllerLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/logout',
            query: {
                id_token_hint: data.idTokenHint,
                post_logout_redirect_uri: data.postLogoutRedirectUri,
                state: data.state
            }
        });
    }
    
    /**
     * sign up a new user
     * @param data The data for the request.
     * @param data.username The username to sign up
     * @param data.password The password
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerSignup(data: ApiControllerSignupData): CancelablePromise<ApiControllerSignupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/signup',
            formData: {
                username: data.username,
                password: data.password
            }
        });
    }
    
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerUnlink(): CancelablePromise<ApiControllerUnlinkResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/unlink'
        });
    }
    
    /**
     * WebAuthn Login Flow 1st stage
     * @param data The data for the request.
     * @param data.owner owner
     * @param data.name name
     * @returns protocol_CredentialAssertion The CredentialAssertion object
     * @throws ApiError
     */
    public static apiControllerWebAuthnSigninBegin(data: ApiControllerWebAuthnSigninBeginData): CancelablePromise<ApiControllerWebAuthnSigninBeginResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/webauthn/signin/begin',
            query: {
                owner: data.owner,
                name: data.name
            }
        });
    }
    
    /**
     * WebAuthn Login Flow 2nd stage
     * @param data The data for the request.
     * @param data.body authenticator assertion Response
     * @returns controllers_Response "The Response object"
     * @throws ApiError
     */
    public static apiControllerWebAuthnSigninFinish(data: ApiControllerWebAuthnSigninFinishData): CancelablePromise<ApiControllerWebAuthnSigninFinishResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/webauthn/signin/finish',
            body: data.body
        });
    }
    
}

export class SystemApiService {
    /**
     * get information of dashboard
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerGetDashboard(): CancelablePromise<ApiControllerGetDashboardResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-dashboard'
        });
    }
    
    /**
     * get Prometheus Info
     * @returns object_PrometheusInfo The Response object
     * @throws ApiError
     */
    public static apiControllerGetPrometheusInfo(): CancelablePromise<ApiControllerGetPrometheusInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-prometheus-info'
        });
    }
    
    /**
     * get system info like CPU and memory usage
     * @returns util_SystemInfo The Response object
     * @throws ApiError
     */
    public static apiControllerGetSystemInfo(): CancelablePromise<ApiControllerGetSystemInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-system-info'
        });
    }
    
    /**
     * get version info like Casdoor release version and commit ID
     * @returns util_VersionInfo The Response object
     * @throws ApiError
     */
    public static apiControllerGetVersionInfo(): CancelablePromise<ApiControllerGetVersionInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-version-info'
        });
    }
    
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerGetWebhookEventType(): CancelablePromise<ApiControllerGetWebhookEventTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/get-webhook-event'
        });
    }
    
    /**
     * check if the system is live
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerHealth(): CancelablePromise<ApiControllerHealthResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/health'
        });
    }
    
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerHandleOfficialAccountEvent(): CancelablePromise<ApiControllerHandleOfficialAccountEventResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/webhook'
        });
    }
    
}

export class ServiceApiService {
    /**
     * This API is not for Casdoor frontend to call, it is for Casdoor SDKs.
     * @param data The data for the request.
     * @param data.clientId The clientId of the application
     * @param data.clientSecret The clientSecret of the application
     * @param data.from Details of the email request
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerSendEmail(data: ApiControllerSendEmailData): CancelablePromise<ApiControllerSendEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/send-email',
            query: {
                clientId: data.clientId,
                clientSecret: data.clientSecret
            },
            body: data.from
        });
    }
    
    /**
     * This API is not for Casdoor frontend to call, it is for Casdoor SDKs.
     * @param data The data for the request.
     * @param data.from Details of the notification request
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerSendNotification(data: ApiControllerSendNotificationData): CancelablePromise<ApiControllerSendNotificationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/send-notification',
            body: data.from
        });
    }
    
    /**
     * This API is not for Casdoor frontend to call, it is for Casdoor SDKs.
     * @param data The data for the request.
     * @param data.clientId The clientId of the application
     * @param data.clientSecret The clientSecret of the application
     * @param data.from Details of the sms request
     * @returns controllers_Response The Response object
     * @throws ApiError
     */
    public static apiControllerSendSms(data: ApiControllerSendSmsData): CancelablePromise<ApiControllerSendSmsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/send-sms',
            query: {
                clientId: data.clientId,
                clientSecret: data.clientSecret
            },
            body: data.from
        });
    }
    
}

export class VerificationApiService {
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerSendVerificationCode(): CancelablePromise<ApiControllerSendVerificationCodeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/send-verification-code'
        });
    }
    
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerVerifyCaptcha(): CancelablePromise<ApiControllerVerifyCaptchaResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/verify-captcha'
        });
    }
    
    /**
     * @returns object_Userinfo The Response object
     * @throws ApiError
     */
    public static apiControllerVerifyCode(): CancelablePromise<ApiControllerVerifyCodeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/verify-code'
        });
    }
    
}